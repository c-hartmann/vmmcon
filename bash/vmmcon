# ex: filetype=sh
# file: /etc/bash_completion/vmmcon
# NOTE: command refers to a command of vmmcon as in: vmmcon <vmmcon_option> <command> <command_option> <vm_name> <vm_name>
# samples: ...
# /usr/share/bash-completion/completions/
# /usr/share/bash-completion/completions/gdbus



# function to create to create an array of vm names
_vmmcon_vm_list()
{
	local vm="$1"
#   vmmcon 'list' "$current_word" 2>/dev/null | tail +2
	vms=()
	#while read vm; do vms+=("$vm"); done < <( vmmcon 'list' "$vm" 2>/dev/null | grep -v '^$' )
	while read vm; do vms+=("$vm"); done < <( vmmcon 'list' 2>/dev/null | grep -v '^$' ) # handled via $current_word in _vmmcon
	#COMPREPLY=( $( compgen -W "${vms[@]}" -- $current_word ) )
	#COMPREPLY=( "${vms[@]}" )
	print "${vms[@]}"
}

# function to create a list of commands without 'commands' (or other "secret" ones)
_vmmcon_commands()
{
	vmmcon 'commands' 2>/dev/null | sed 's/commands//'
}

# function to create command (see above) or vm names completions
# TODO: create a second vm name for commands as clone
_vmmcon()
{
	local current_word previous_word

	# init the reply array read by the bash to present completions
	COMPREPLY=()

	# word at (under) current cursor position
	current_word="${COMP_WORDS[COMP_CWORD]}"

	# previous word (before current word)
	previous_word="${COMP_WORDS[COMP_CWORD-1]}"

	# no (vmmcon) command given so far
	if [[ $COMP_CWORD -eq 1 ]] ; then
#		COMPREPLY=( $( compgen -W "create launch list start status" -- $current_word ) )  # just a sample
#		COMPREPLY=( $( compgen -W "$( vmmcon 'commands' 2>/dev/null )" -- $current_word ) )
		COMPREPLY=( $( compgen -W "$( _vmmcon_commands )" -- $current_word ) )
	else
			case $previous_word in
				clone | close | delete | destroy | enter | exec | export | halt \
				      | info | list | login | move | open | pause | poweroff | reboot \
				      | remove | rename | reset | restart | run | shell | shutdown \
				      | snap | ssh | start | state | status | stop | ungroup  | up | view \
				      )
					#_vmmcon_list
					#COMPREPLY=( $( compgen -W "$( _vmmcon_vm_list "$current_word" )" -- $current_word ) )
					COMPREPLY=( $( compgen -W "$( _vmmcon_vm_list )" -- $current_word ) ) # NOTE: untested
					return 0
					;;
			esac

			#COMPREPLY=( $( compgen -W "$options" -- $current_word ) )
	fi

}
# main (connect autocompletion with function here)
complete -F _vmmcon vmmcon

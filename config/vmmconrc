###
### ~/.config/vmmconrc
### (former path: ~/.local/share/vmmcon/vmmconrc)
###

vm_tcp_ssh_username="$LOGNAME"
# vm_host_ssh_port=2222
# vm_host_http_port=8080
# vm_ip_address='10.0.2.15' # may be empty !? see: https://superuser.com/questions/901422/virtualbox-command-line-setting-up-port-forwarding
# vm_ip_address='' # see: https://www.virtualbox.org/manual/ch06.html#natforward

# SEE THIS TEMPLATE: /etc/bluetooth/main.conf

### directory your ISO downloads generaly go into. if left empty or unset the
### search for ISO files will try $HOME/Downloads
iso_download_top_dir="$HOME/Downloads/ISOs"

### TODAY is used as a base for a 'STAMP' trailing the new VMs name
TODAY="$(date --iso-8601)"


# TODO: are there non-kde associated commands to create kde like config
# files? (such as kwriteconfig5 / kreadconfig)
# [section]  can this be "searched" via grep by 'section'. likely! but how
# to read following lines until the next empty one. (or EOF)
# get line count numbers with grep for 'section' and for empty lines?
# use the first empty line number greater than section?
# an approach to read this kind of config files:
# https://unix.stackexchange.com/questions/438596/robust-command-line-cli-configuration-of-plasma-kde-applets

# is ~/.config a XDG thing? or a KDE only thing?
# see: https://www.reddit.com/r/kde/comments/xqh77r/kde_and_config_files/
# > I'm guessing you're talking about rc files. In which case they're not
# > "config" files.
# > They're runtime commands. And it's a standard XDG directory for them!
# > export XDG_CONFIG_HOME=~/.local/.config

# see: https://github.com/shalva97/kde-configuration-files

# some generic issues with rc commands:
# https://opensource.com/article/21/5/processing-configuration-files-shell

# https://stackoverflow.com/questions/13534306/how-can-i-set-the-grep-after-context-to-be-until-the-next-blank-line
# > awk '/pattern/' RS= input-file
# > awk '/Start to grab/,/^$/' prova.txt
# > | tail +1 ?
# https://stackoverflow.com/questions/23831767/grep-awk-a-file-from-a-to-first-empty-line

# the only way to configure the defaults is to use a text editor
# uncomment the run_in_terminal line if it is a less known terminal only application
vmmcon_defaults_editor="kwrite"
#vmmcon_defaults_editor="$EDITOR"
#vmmcon_defaults_editor_run_in_terminal=true



# some first thoughts on qemu way to start vms
qemu_run_command='kvm' # qemu-system-x86_64, qemu-system-i386 (kvm enabled full hardware based virtualization)



### every created VM will be added as a start menu item.
### uncomment next line to disable the default behaviour
create_desktop_menu_entry=true
#create_desktop_menu_entry_icon=computer-symbolic
#create_desktop_menu_entry_icon=preferences-system-login
create_desktop_menu_entry_icon=preferences-system-startup



### by default the created entry will start the VM via this scripts start option
### optionaly the entry can use the VMMs native startup command
#create_desktop_menu_entry_native_command=true

# TODO disk and memory sizes
vm_setup_default_profile='minimal' # or "default", "comfort", "desktop", "server"

# TODO unattended install (debian: preseed, other: ???)
vm_unattended_install='false'



# TODO: consistent use of false and $(false) or 0 or 1 ?
# test:
# $ bool=true
# $ echo $bool
# true
# $ $bool && echo JA
# JA
# gegentest:
# bool=false
# $ echo $bool
# false
# $bool && echo JA
# $bool || echo NEIN
# NEIN

# das aber ist ein FALSCHER test:
# $ if [ $bool ]; then echo JA; else echo NEIN; fi
# JA

# das ist der richtige test:
# if $bool; then echo JA; else echo NEIN; fi
# NEIN

# geht nicht: (weil =0 und =1 das gleiche Ergebnis produzieren)
# $ bool=1
# $ test $bool && echo JA
# JA
# $ bool=0
# $ test $bool && echo JA
# JA
#

# 0 und 1 sind eh nicht schön für boolsche Werte und können gut und gerne
# integer Werten vorbehalten sein!

# Oder ich bastel mir eine Funktion drum rum:
# is_set $config_value , die auch mit 0 und 1 umgehen kann (als fallback)
# JA, schon weil es sich viel besser liest
# like:
# is_set() { kann bash den typ des params test(en)? aber mit einem integer multiplizieren?
# zuerst: lowercase($param)
# und dann isses ein Integer !? 0*0 is 0, 0*1 is auch null, aber was ist true*0?
# wenn: $param == true UND: $param != false; dann: return 0
# sonst: return (( $param * 1 ))
# >> catch error?
# is_integer() {
# 	[[ "$value" =~ ^[0-9]+$ ]]   # schick aber "teuer" (das + ist wichtig wg. leeren values)
#	[[ -z "${number//[0-9]}" ]]  # sollte auch klappen, aber vermutlich ähnlich teuer
#	# beide könnten nicht mit Vorzeichen behafteten, aber brauch es das !?
#	# und was sit mit LEEREN !? (im zweiten Test wäre das also ein Integer, nee, sch* Idee)
# }




### VMM is for Virtual Machine Monitor (or Manager) and a core value
### here. currently there are two supported:
### vbox (aka VirtualBox)
### libvirt (aka QEMU, Virt-Manager)
### the value can be set here as follows or in ~/.bashrc or on command line
### desktop integrations use the command line option (--vmm=<vmm>)
### vmm to set value of internal VMM permanently.
### use env::VMMCTL_VMM to override this for a single run
vmm='vbox'

### Linux guests should use KVM as Hypervisor
# vm_hypervisor="kvm" # DEPRICATED
vbox_vm_paravirtprovider='kvm' # 'kvm' is recommended for Linux guests

### the name of the new VM is derived from the filename of ISO image and
### an appended 'STAMP'. the general form of the STAMP is "<space>($TODAY)"
### uncomment to disable this feature
#create_stamp=$(false)

### or you can set the STAMP itself here:
STAMP="-${TODAY}"

### HINT: entries might be created for existing VMs with this command:
### $ vmmvtl 'create-desktop-entry' "$VM"

### HINT: to get a usable list of existing VMs with use this command:
### $ vmmcon 'list'

### CPU / MEMORY ...

### DETERMINE HOW MANY CPU CORES YOUR NEW VIRTUAL SYSTEM WILL OWN. valid:
### 0:   the count will be computed from the count of cpus of the host system.
### 1-n: any number greater than 0 will be used whatever the host looks like
### NOTE: VBox can assign more cpu cores than actualy available on host. so ...
###       having a fixed value is more reasonable as one might assume.
#vm_cpu_count=0
# as of: https://www.virtualbox.org/ticket/20525
#   and: https://www.virtualbox.org/ticket/20526
# currently create vms with just one core (on intel)
vm_cpu_count=2

### the vm cpu divider will be used to compute the number of cpus if not given
### this is a simple integer division. so a value of 3 gives you 2 vm cpus
### if the host e.g. has 8 cores: 8 / 3 => 2
### a value of 2 gives you 4 vm cpus: 8 / 2 => 4
vm_cpu_count_divider=2

### https://www.it-swarm.com.de/de/virtualbox/wann-muss-ich-pae-nx-verwenden/944835828/
### > there is no use of PAE for 64 bit guests
### > in gereral you do not want to passthrough
### >of hardware virtualization functions to the guest VM
### https://docs.oracle.com/en/virtualization/virtualbox/6.0/admin/nestedpaging.html
### > Nested paging implements some memory management in hardware, which can *greatly
### > accelerate* hardware virtualization since these tasks no longer need to be
### > performed by the virtualization software.
### https://en.wikipedia.org/wiki/Second_Level_Address_Translation
### > Second Level Address Translation (SLAT), also known as nested paging,
### > is a hardware-assisted virtualization technology which makes it possible
### > to avoid the overhead associated with software-managed shadow page tables.
vm_pae="off"                                   # (TODO: rename to vbox_* scheme)
vm_ioapic="on"                                 # (TODO: rename to vbox_* scheme)
vm_nested_virt="off"                           # (TODO: rename to vbox_* scheme)

# howto read host cpu support for this?
# > grep -E '\bept\b|\bnpt\b' /proc/cpuinfo
# > cat /sys/module/kvm_intel/parameters/nested  ->  Y   # Intel only
vm_nestedpaging="on"                           # (TODO: rename to vbox_* scheme)
vm_largepages="on"  # not on GUI. with nested paging large page are common

### BY DEFAULT MAIN MEMORY IS CALCULATED TO A FOURTH OF HOSTS MEMORY SIZE.
### vm_memory_size=0 ENABLES THIS AUTOMATIC.
### IF THIS FAILS, IT FALBACKS TO 4 GB (equals to 4096 MB)
vm_memory_size=0
vm_memory_size_divider=4
vm_memory_size_fallback=4048

### MOST MODERN PHYSICAL SYSTEMS DO HAVE UEFI AS INITAL PROGRAM
### ALTHOUGH VIRTUALBOX DEFAULTS TO BIOS FOR COMPATIBILITY REASONS.
vm_firmware="bios" # bios|efi|efi32|efi64



### USB ... (TODO: rename to vbox_* scheme)

### incompatible vbox ext pack can prevent system
### from booting if usb 2 or 3 support is enabled
vm_usbehci="off" # USB-2.0, default: "off"
vm_usbxhci="off" # USB-3.0, default: "off"



### DISK ... (TODO: partly rename to vbox_* scheme)

### the default container format for virtual hard disks is vdi. vmdk would
### allow the use of the new containers in QEMU as well, but these can not
### be resized within VirtualBox
vm_disk_type="vdi"                             # (TODO: rename to vbox_* scheme)

vm_disk_count=1

### disk size set to 40 GB here. perfect candidate for setting to different
### sizes in temlate files
vm_disk_size=40

### disk size allocation 'dynamic' (default) or 'fixed' size disk creation
vm_disk_alloc="dynamic"                        # (TODO: rename to vbox_* scheme)



### GRAPHICS ...

### box gui video memory uses max of 128 MB by default, but more is valid
vm_vram_size=256

### VBox recommends to use VMSVGA graphics controller for Linux guests, so we do.
### NOTE: others recommend VBoxSVGA
### https://arcolinux.com/how-to-set-virtualbox-6-the-correct-way-graphical-controller-workflow/

### VMSVGA: Use this graphics controller to emulate a VMware SVGA graphics device.
### This is the *default* graphics controller for Linux guests.
### unfortunately this comes with the essential limitation of 800x600 screen size..
### so you might prefere to go with vboxsvga instead!

### NOTE: choosing vboxsvga results in a warning inside the vbox gui !!!
vm_gfx_controller="vmsvga"   # default: "vmsvga", other: "vboxvga", "vboxsvga", "none"

### https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/guestadd-video.html
vm_gfx_accelerate3d="on"   ### *not* with 'vboxsvga' controller

#vm_efi_gfx_resolution="1280x800"  # WXGA

### extra data if configured to vboxsvga adapter (require guest additions installed)

#vm_gfx_controller_resolutions=( "1024x768x16" "1152x864x16" "1280x1024x16" )


# human interface devices
vm_hid_pointing="usbtablet"
vm_hid_keyboard="ps2"

#! /usr/bin/env bash

# TODO do we have to take care, where we are extracted and run?

# TODO this file should be very generic and e.g. use a list of files to install
#      is the tar.gz package still avalailable? (serving as input).
#      where is the source code? dolpin.
# DONE .. BUT .. this the wrong approach, as this can not handle breakouts to
#                upper or parallel directories. and we have to!

# content of a sample install.files.csv
# tyep:path:mode:keep[:owner[:group]]
# d:./hello.txt:755:true
# f:./hello/hello.txt:644:false:root



ME="install.sh"
ME_EXTRAS="install-extras.sh"
MY_FILES_LIST="install.files.csv"
MY_TITEL="Dolphin User Service Menu Installer"
MY_ICON="install"
MY_ARCHIVE="create-vm-from-iso-vbox.tar.gz"

SCRIPT_DIR="$(dirname "$(readlink -m "$0")")"
DEFAULT_INSTALL_DIR="$HOME/.local/share/servicemenu-download/${MY_ARCHIVE}-dir"

DEFAULT_USER_BIN_DIR="$HOME/.local/bin"

# run mode
declare gui=false
declare cli=false

### _notify
### wrapper that respects gui or cli mode
_notify ()
{
	$gui && notify-send --app-name="${MY_TITLE}" --icon="${MY_ICON}" --expire-time=$notification_timeout "$@"
	$cli && printf "\n$@\n" >&2
}

### _error_exit
### even more simple error handling
_error_exit ()
{
	local error_str="$(gettext "ERROR")"
	$gui && kdialog --error "$error_str: $*" --ok-label "So Sad"
	$cli && printf "\n$error_str: $1\n\n" >&2
	exit ${2:-1}
}

_init_run_mode ()
{
	if [[ ! -t 0 ]]; then
		# running via service menu
		gui=true
		cli=false
	else
		# running from command line
		gui=false
		cli=true
	fi
}

_get_install_download_directory ()
{
	test -f "${SCRIPT_DIR}/${ME}" && printf "${SCRIPT_DIR}" && return
	test -f "${DEFAULT_INSTALL_DIR}/${ME}" && printf "${_default_install_dir}" && return
}

### _get_first_user_bin_dir_from_path ( $PATH )
_get_first_user_bin_dir_from_path ()
{
	local _path="$1"
	local _first=""
	_first="$( printf '%s' "$_path" | tr ':' '\n' | grep -e "^${HOME}/" | head -1 )"
	if [[ -d "$_first" ]]; then
		printf '%s' "$_first"
	else
		printf '%s' "${DEFAULT_USER_BIN_DIR}"
	fi
}

### _check_user_bin_dir <user-bin-dir>
### lookout for user bin/ - create if not existing
_check_user_bin_dir ()
{
	local _user_bin_dir="$1"
	test -d "$_user_bin_dir" || mkdir "$_user_bin_dir"
	test -d "$_user_bin_dir" && return true || return false
}

_check_user_bin_dir_in_path ()
{
	local _user_bin_dir="$1"
	local _path="${2:-$PATH}"
	printf '%s' "${_path}" | tr ':' '\n' | grep -q -e "^${_user_bin_dir}$"
}

_template ()
{
	:
}

_notify ()
{
	:
}

_main ()
{
	local _user_bin_dir="$(_get_first_user_bin_dir_from_path "$PATH")"

	_check_user_bin_dir "$_user_bin_dir" || _error_exit "user bin dir does not exists or could not be created: $_user_bin_dir"

	_check_user_bin_dir_in_path "$_user_bin_dir" "$PATH" || _notify "user bin dir is not in your binary search \$PATH: $_user_bin_dir"

	# do we have a directory?
	# if, install "backend" therein and create a symlink in my service menu subdirectory
	# if not "backend" goes to my service menu subdirectory (straight solution)
		# not so straight ...
		# create directory ~/.local/bin and after that as above
			# this does require a distro that respects this directory
				# on the other hand ... who cares. if e install into service menu subdirectory it is not usabel on command line either
		# copy .sh file to user bin dir and create a symlink without extension therein

	# that being said...

	_check_install_list "${SCRIPT_DIR}/${MY_FILES_LIST}" || _error_exit "fatal error. file is missing: $MY_FILES_LIST"

	_check_owner ()
	{
		local _path="$1"
		local _owner="$2"
		[[ "$_owner" == "$(stat --format '%U' "$_path")" ]] || chown "$_path" "$_owner"
	}

	_check_group ()
	{
		local _path="$1"
		local _group="$2"
		[[ "$_group" == "$(stat --format '%G' "$_path")" ]] || chgrp "$_path" "$_group"
	}

	while IFS=':' read type path mode keep owner group dump; do
		[[ "$type2" =~ #.* ]] && continue
		case $type in
			d)
				_dir="$path"
				test -d "$_dir" || mkdir -p "$_dir"
			;;
			f)
				### create file if i'am allowed to overwrite on update
				if ! $keep; then
					_file="${path##*/}"
					if [[ -f "./${_file}" ]]; then
						cp "./${_file}" "${path}"
					else
						touch "${path}"
					fi
				else
					### keep users file, but do not waste mine
					cp "./${_file}" "${path}.$(date --iso-8601)"
				fi

				if [[ ! -f "./${_file}" ]]; then
					cp "./${_file}" "${path}"
				else
					if
					touch "${path}"
				fi
			;;
			*)
				_error_exit "fatal error: install.files.csv in invalid format. found 'type': $type
			;;
		esac
		### ownerships are not depending on file type and optional
		$keep || test -n "$owner" && _check_owner "$path" "$owner"
		$keep || test -n "$group" && _check_group "$path" "$group"
	done < "${SCRIPT_DIR}/${MY_FILES_LIST}"
}

_check_install_list ()
{
	local _my_files_list="$1"
	test -f "${_my_files_list}"
}

_init_run_mode

_main

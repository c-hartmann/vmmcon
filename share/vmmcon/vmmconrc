###
### ~/.config/vmmconrc
### ~/.local/share/vmmcon/vmmconrc (former path)
###

qemu_images_directory="$HOME/.QEMU/images" # ~/.VirtualBox/VMs # to override absolute path names are required
# ~/.local/share/qemu ? # as these images tend to be extra larg, this directory should be easily distinguiashabel and easy to exclude from backups on demand

default_setup_profile="minimal" # or "default", "comfort", "desktop", "server"
# vm_default_setup_option=""

vbox_unattended_install=false

# TODO: consistent use of false and $(false) or 0 or 1 ?
# geht:
# solo:VMs$ bool=true
# solo:VMs$ echo $bool
# true
# solo:VMs$ $bool && echo JA
# JA
# geht nicht: (weil =0 und =1 das gleiche Ergebnis produzieren)
# solo:VMs$ bool=1
# solo:VMs$ test $bool && echo JA
# JA
# solo:VMs$ bool=0
# solo:VMs$ test $bool && echo JA
# JA
# >>
# 0 und 1 sind eh nicht schön für boolsche Werte und können gut und gerne
# integer Werten vorbehalten sein! Oder ich bastel mir eine Funktion drumrum:
# is_set $config_value , die auch mit 0 und 1 umgehen kann (als fallback)
#
# like:
# is_set() { kann bash den typ des params test(en)? aber mit einem integer multiplizieren?
# zuerst: lowercase($param)
# und dann isses ein Integer !? 0*0 is 0, 0*1 is auch null, aber was ist true*0?
# wenn: $param == true UND: $param != false; dann: return 0
# sonst: return (( $param * 1 ))
# >> catch error?
# is_integer() {
# 	[[ "$value" =~ ^[0-9]+$ ]]   # schick aber "teuer" (das + ist wichtig wg. leeren values)
#	[[ -z "${number//[0-9]}" ]]  # sollte auch klappen, aber vermutlich ähnlich teuer
#	# beide könnten nicht mit Vorzeichen behafteten, aber brauch es das !?
#	# und was sit mit LEEREN !? (im zweiten Test wäre das also ein Integer, nee, sch* Idee)
# }

### every created VM will be added as a start menu item. uncomment next
### line to disable this feature
#create_desktop_menu_entry=false

### by default the created entry will start the VM via this scripts start option
### optionaly the entry can use the VMMs native startup command
#create_desktop_menu_entry_native_command=true




### VMM is for Virtual Machine Monitor (or Manager) and a core value
### here. currently there are two supported:
### vbox (aka VirtualBox)
### libvirt (aka QEMU, Virt-Manager)
### the value can be set here as follows or in ~/.bashrc or on command line
### desktop integrations use the command line option (--vmm=<vmm>)
### vmm to set value of internal VMM permanently.
### use env::VMMCTL_VMM to override this for a single run
vmm='vbox'

### Linux guests should use KVM as Hypervisor
# vm_hypervisor="kvm" # DEPRICATED
vbox_vm_paravirtprovider="kvm" # "kvm" is recommended for Linux guests

### directory your ISO downloads generaly go into. if left empty or unset the
### search for ISO files will try $HOME/Downloads
iso_download_top_dir="$HOME/Downloads/ISOs"

### TODAY is used as a base for a 'STAMP' trailing the new VMs name
TODAY="$(date --iso-8601)"

### the name of the new VM is derived from hte filename of ISO image and
### an appended 'STAMP'. the general form of the STAMP is "<space>($TODAY)"
### uncomment to disable this feature
#create_stamp=$(false)

### HINT: entries might be created for existing VMs with this command:
### $ vmmvtl 'create-desktop-entry' "$VM"

### HINT: to get a usable list of existing VMs with use this command:
### $ vmmcon 'list'

### CPU / MEMORY ...

### DETERMINE HOW MANY CPU CORES YOUR NEW VIRTUAL SYSTEM WILL OWN. valid:
### 0:   the count will be computed from the count of cpus of the host system.
### 1-n: any number greater than 0 will be used whatever the host looks like
### NOTE: VBox can assign more cpu cores than actualy available on host. so ...
###       having a fixed value is more reasonable as one might assume.
vm_cpu_count=0

### the vm cpu divider will be used to compute this automatically
### this is a simple integer division. so a value of 3 gives you 2 vm cpus
### if the host e.g. has 8 cores: 8 / 3 => 2
### a value of 2 gives you 4 vm cpus: 8 / 2 => 4
vm_cpu_count_divider=2

### https://www.it-swarm.com.de/de/virtualbox/wann-muss-ich-pae-nx-verwenden/944835828/
### > there is no use of PAE for 64 bit guests
### > in gereral you do not want to passthrough
### >of hardware virtualization functions to the guest VM
### https://docs.oracle.com/en/virtualization/virtualbox/6.0/admin/nestedpaging.html
### > Nested paging implements some memory management in hardware, which can *greatly
### > accelerate* hardware virtualization since these tasks no longer need to be
### > performed by the virtualization software.
### https://en.wikipedia.org/wiki/Second_Level_Address_Translation
### > Second Level Address Translation (SLAT), also known as nested paging,
### > is a hardware-assisted virtualization technology which makes it possible
### > to avoid the overhead associated with software-managed shadow page tables.
vm_pae="off"                                   # (TODO: rename to vbox_* scheme)
vm_ioapic="on"                                 # (TODO: rename to vbox_* scheme)
vm_nested_virt="on"                            # (TODO: rename to vbox_* scheme)

# howto read host cpu support for this?
# > grep -E '\bept\b|\bnpt\b' /proc/cpuinfo
# > cat /sys/module/kvm_intel/parameters/nested  ->  Y   # Intel only
vm_nestedpaging="on"                           # (TODO: rename to vbox_* scheme)

### BY DEFAULT MAIN MEMORY IS CALCULATED TO A FOURTH OF HOSTS MEMORY SIZE.
### vm_memory_size=0 ENABLES THIS AUTOMATIC.
### IF THIS FAILS, IT FALBACKS TO 4 GB (equals to 4096 MB)
vm_memory_size=0
vm_memory_size_divider=4
vm_memory_size_fallback=4048

### MOST MODERN PHYSICAL SYSTEMS DO HAVE UEFI AS INITAL PROGRAM
### ALTHOUGH VIRTUALBOX DEFAULTS TO BIOS FOR COMPATIBILITY REASONS.
vm_firmware="bios" # bios|efi|efi32|efi64



### USB ... (TODO: rename to vbox_* scheme)

### incompatible vbox ext pack can prevent system
### from booting if usb 2 or 3 support is enabled
vm_usbehci="off" # USB-2.0, default: "off"
vm_usbxhci="off" # USB-3.0, default: "off"



### DISK ... (TODO: partly rename to vbox_* scheme)

### the default container format for virtual hard disks is vdi. vmdk would
### allow the use of the new containers in QEMU as well, but these can not
### be resized within VirtualBox
vm_disk_type="vdi"                             # (TODO: rename to vbox_* scheme)

vm_disk_count=1

### disk size set to 40 GB here. perfect candidate for setting to different
### sizes in temlate files
vm_disk_size=40

### disk size allocation 'dynamic' (default) or 'fixed' size disk creation
vm_disk_alloc=dynamic                          # (TODO: rename to vbox_* scheme)



### GRAPHICS ...

### box gui video memory uses max of 128 MB by default, but more is valid
vm_vram_size=256

### VBox recommends to use VMSVGA graphics controller for Linux guests, so we do.
### NOTE: others recommend VBoxSVGA
### https://arcolinux.com/how-to-set-virtualbox-6-the-correct-way-graphical-controller-workflow/

### VMSVGA: Use this graphics controller to emulate a VMware SVGA graphics device.
### This is the *default* graphics controller for Linux guests.
### unfortunately this comes with the essential limitation of 800x600 screen size..
### so you might prefere to go with vboxsvga instead!

### NOTE: choosing vboxsvga results in a warning inside the vbox gui !!!
#vm_gfx_controller="vboxsvga"   # default: "vmsvga", other: vboxvga, vboxsvga, none

### https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/guestadd-video.html
vm_gfx_accelerate3d=on      ### *not* with 'vboxsvga' controller

#vm_efi_gfx_resolution="1280x800"  # WXGA

### extra data if configured to vboxsvga adapter (require guest additions installed)

#vm_gfx_controller_resolutions=( "1024x768x16" "1152x864x16" "1280x1024x16" )

vbox_unattended_install=true # if available. default is auto, that uses the config value from json
vbox_unattended_install_vm_host_name="%%profile%%"
vbox_unattended_install_user_name="christian" # "%%logname%%"
vbox_unattended_install_user_pass="FooBar"
vbox_unattended_install_user_uid=1000
vbox_unattended_install_user_gid=1000
vbox_unattended_install_user_gecos="christian hartmann" # "%%username%%"
vbox_unattended_install_vm_time_zone="CEST"
vbox_unattended_install_vm_country="DE" # %%country%%
vbox_unattended_install_vm_locale="de_DE" # %%LOCALE%%
vbox_unattended_install_vm_language="de-DE" # %%LANG%% (windows only?)
vbox_unattended_install_vm_start_type="headless" # required? why headless. i WANNE see that magic happen! likely not!: https://www.youtube.com/watch?v=wUQ1CNptnTI
# vbox_unattended_install_pass="FooBar"

# TODO: create a "configure script that runs right after install to configure at least the unattended install

# see: https://docs.oracle.com/en/virtualization/virtualbox/6.0/user/basic-unattended.html
# Perform an unattended install of the OS:
# $ VBoxManage unattended install $VM \
# --iso=/u01/Software/OL/OracleLinux-R7-U6-Server-x86_64-dvd.iso \
# --user=login --full-user-name=name --password password \
# --install-additions --time-zone=CET

# see: https://blogs.oracle.com/virtualization/post/guide-for-virtualbox-vm-unattended-installation
# $ VBoxManage unattended install <uuid|vmname>
# --iso=install-iso>
# [--user=login]
# [--password=password]
# [--password-file=file]
# [--full-user-name=name]
# [--key=product-key]
# [--image-index=number]
# [--install-additions]
# [--no-install-additions]
# [--additions-iso=add-iso]
# [--install-txs]
# [--no-install-txs]
# [--validation-kit-iso=testing-iso]
# [--locale=ll_CC]
# [--country=CC]
# [--time-zone=tz]
# [--hostname=fqdn]
# [--package-selection-adjustment=keyword]
# [--dry-run]
# [--auxiliary-base-path=path]
# [--script-template=file]
# [--post-install-template=file]
# [--post-install-command=command]
# [--extra-install-kernel-parameters=params]
# [--language=lang]
# [--start-vm=session-type]



# NOTE:
# this might be a good starting point for an vbox independent approach:
# https://stackoverflow.com/questions/39861614/how-to-fully-automate-unattended-virt-install
# > do we need kernel parameters to setup the install process?
# > or will the auto-installer look for some default (network) locations after a preseed?
# > will nc(1) provide a http server?
# from https://www.debian.org/releases/stable/amd64/apbs01.en.html:
# B.1.1. Preseeding methods
# There are three methods that can be used for preseeding: initrd, file and **network**.
#   To illustrate this, here are some examples that can be used at the boot prompt:
#   auto url=autoserver
#   with a reasonably sane DHCP setup, it would result in the preseed file being retrieved from:
#   http://autoserver.example.com/d-i/bookworm/./preseed.cfg
# or such like: auto url=http://192.168.1.2/path/to/mypreseed.file
